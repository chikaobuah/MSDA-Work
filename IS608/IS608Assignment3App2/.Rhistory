for (j in 1:nrow(x)) {
C[i,j] <- 1
print(C)
}
}
}
cofactors <- function(x){
C <- matrix(rep(0,length(x)),ncol=ncol(x))
for (i in 1:ncol(x)) {
for (j in 1:nrow(x)) {
C[i,j] <- 1
}
}
print(C)
}
cofactors(D)
cofactors <- function(x){
C <- matrix(rep(0,length(x)),ncol=ncol(x))
for (i in 1:ncol(x)) {
for (j in 1:nrow(x)) {
C[i,j] <- 1
}
}
}
C
cofactors(D)
C
cofactors <- function(x){
C <- matrix(rep(0,length(x)),ncol=ncol(x))
for (i in 1:ncol(x)) {
for (j in 1:nrow(x)) {
C[i,j] <- 1
}
}
print(C)
}
cofactors(D)
C
cofactors <- function(x){
C <- matrix(rep(0,length(x)),ncol=ncol(x))
for (i in 1:ncol(x)) {
for (j in 1:nrow(x)) {
C[i,j] <- 3
}
}
print(t(C))
}
cofactors(D)
cofactors <- function(x){
C <- matrix(rep(0,length(x)),ncol=ncol(x))
for (i in 1:ncol(x)) {
for (j in 1:nrow(x)) {
C[i,j] <- 3
}
}
print(t(C)/det(X))
}
cofactors(D)
findInverse <- function(x){
cofactorMatrix <- matrix(rep(0,length(x)),ncol=ncol(x))
for (i in 1:ncol(x)) {
for (j in 1:nrow(x)) {
cofactorMatrix[i,j] <- det(x[-i,-j])*(-1)^(i+j)
}
}
print(t(cofactorMatrix)/det(x))
}
D
findInverse(D)
findInverse(D)*D
D %*% D
findInverse(D) %*% D
dim(findInverse(D) %*% D)
D %*% findInverse(D)
round(D %*% findInverse(D),6)
findInverse(D)
findInverse <- function(x){
cofactorMatrix <- matrix(rep(0,length(x)),ncol=ncol(x))
for (i in 1:ncol(x)) {
for (j in 1:nrow(x)) {
cofactorMatrix[i,j] <- det(x[-i,-j])*(-1)^(i+j)
}
}
inverse <- (t(cofactorMatrix)/det(x))
}
findInverse(D)
inverse
findInverse <- function(x){
cofactorMatrix <- matrix(rep(0,length(x)),ncol=ncol(x))
for (i in 1:ncol(x)) {
for (j in 1:nrow(x)) {
cofactorMatrix[i,j] <- det(x[-i,-j])*(-1)^(i+j)
}
}
print(t(cofactorMatrix)/det(x))
}
findInverse(D)
D <- matrix(c(2,4,5,7,7,12,8,3,5), nrow = 3)
findInverse(D)
D %*% findInverse(D)
round(D %*% findInverse(D),6)
B = findInverse(D)
B
myinverse <- function(x){
cofactorMatrix <- matrix(rep(0,length(x)),ncol=ncol(x))
for (i in 1:ncol(x)) {
for (j in 1:nrow(x)) {
cofactorMatrix[i,j] <- det(x[-i,-j])*(-1)^(i+j)
}
}
print(t(cofactorMatrix)/det(x))
}
# Now we will test the function, with a sample matrix, A:
A <- matrix(c(2,4,5,7,7,12,8,3,5), nrow = 3)
B = myinverse(A)
B
A <- matrix(c(2,4,5,7,7,12,8,3,5), nrow = 3)
B = myinverse(A)
# If the formula worked, we will D multiplied by the inverse should return the identity matrix
# If the formula worked, then A multiplied by it's inverse (B) should return the identity matrix
A %*% B
# This returned very small numbers on the off-diagonals. To see it more clearly, we will round to 6 significant figures:
round(A %*% B,6)
Problem Set 1
# Problem Set 2
# Here we will create a function that takes a matrix as an input and outputs the inverse matrix.
# First we will create a "template" cofactor Matrix, with the same dimensions as the input matrix with all elements set to 0.
# First we will create a "template" cofactor Matrix, with the same dimensions as the input matrix with
# all elements set to 0.
?rmd
install.packages('RODBC')
RShowDoc("RODBC", package="RODBC").
require(RODBC)
install.packages("RODBC")
load("/Users/davidstern/Downloads/RODBC 2/Meta/package.rds")
load("/Users/davidstern/Downloads/RODBC/Meta/package.rds")
load("/Users/davidstern/Downloads/RODBC2/Meta/package.rds")
load("/Users/davidstern/Downloads/RODBC 2/Meta/package.rds")
install.packages("RODBC")
install.packages("RPostgreSQL")
install.packages("sqldf")
library(RPostgreSQL)
install.packages("RPostgreSQL")
getwd()
---
getwd()
getwd()
getwd()
getwd()
detectTwo <- function(doc,word1,word2){
text <- scan(doc, character(0),quote=NULL)
output <- tolower(gsub("[^[:alnum:][:space:]]", "", text))
total <- table(output)/length(output)
word1 <- as.character(word1)
word2 <- as.character(word2)
count <- 0
for(i in 1:length(text)){
if (output[i] == word1 && (output[i-1] == word2 || output[i+1] == word2))
{
count <- count + 1
}
}
results <- as.matrix(c(total[word1],total[word2],count/length(text)),byrow=TRUE)
rownames(results) <- c(word1,word2,"adjacency")
print(t(results))
}
detectTwo("assign6.sample.txt","the","for")
text <- scan("assign6.sample.txt", character(0),quote=NULL)
head(text)
twoWords <- function(doc,word1,word2){
totals <- allProbs(doc)
word1 <- as.character(word1)
word2 <- as.character(word2)
print(totals[word1])
print(totals[word2])
}
twoWords("assign6.sample.txt","the","for")
allProbs <- function(x){
text <- scan(x, character(0),quote=NULL)
output <- tolower(gsub("[^[:alnum:][:space:]]", "", text))
return(table(output)/length(output))
}
twoWords <- function(doc,word1,word2){
totals <- allProbs(doc)
word1 <- as.character(word1)
word2 <- as.character(word2)
print(totals[word1])
print(totals[word2])
}
twoWords("assign6.sample.txt","the","for")
detectTwo("assign6.sample.txt","the","for")
require(RCurl)
url <- "https://raw.githubusercontent.com/jlaurito/CUNY_IS608/master/lecture3/data/cleaned-cdc-mortality-1999-2010.csv"
mortData <- getURL(url)
mortData <- read.csv(textConnection(mortData))
head(mortDara)
head(mortData)
demo('googlevis')
demo('googleVis')
library(shiny)
runExample("01_hello")
table(mortData)
summary(mortData)
shinyUI(pageWithSidebar(
headerPanel("Mortality Data"),
sidebarPanel(),
mainPanel()
))
~/sinyapp
~/shinyapp
getwd()
setwd("/Users/davidstern/Github/MSDA-Work/IS608Week3-App")
shiny::runApp()
head(mortData)
mortdata[,"Alabama"]
mortdata[,State ="Alabama"]
?subset
subset(mortData, State = "Alabama")
subset(mortData, State == "Alabama")
A <- subset(mortData, State == "Alabama")
order(A, Year = Descending)
order(A, Year, Descending = TRUE)
order(A, Year, decreasing = TRUE)
A <- A[order(Year,)]
A <- A[order(Year),]
A <- subset(mortData, State == "Alabama")
A <- A[order(Year),]
A <- A[order("Year"),]
A
A <- subset(mortData, State == "Alabama")
A <- A[order(Year),]
A <- A[order(A$Year),]
A
head(mortData)
rM(A)
rm(A)
1092/443014
1092/4430141
mort2010 <- subset(mortData, Year == "2010")
mort2010
head(mort2010)
?unique
summary(mortData$ICD.Chapter)
table(mortData$ICD.Chapter)
runExample("02_text")
head(mortData2010)
head(mort2010)
shiny::runApp()
causes <- unique(mort2010$ICD.Chapter)
causes
?subset
subset(airquality, Temp > 80, select = c(Ozone, Temp))
?aggregate
subset(mort2010,State=="Alabama")
subset(mort2010,State=="Alabama",select=c(State,ICD.Chapter,Crude.Rate)
)
subset(mort2010,State=="Alabama",select=c(State,ICD.Chapter,Crude.Rate))
b <- subset(mort2010,State=="Alabama",select=c(State,ICD.Chapter,Crude.Rate))
summary(mort2010)
subset(mort2010,ICD.Chapter=="Diseases of the digestive system",select=c("State","Deaths","Crude.Rate"))
b <- subset(mort2010,ICD.Chapter=="Diseases of the digestive system",select=c("State","Deaths","Crude.Rate"))
b <- b[order(Crude.Rate),]
b <- b[order(b$Crude.Rate),]
b
b <- b[order(-b$Crude.Rate),]
b
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?sidebarPanel
runExample("02_text")
shiny::runApp()
runExample("02_text")
shiny::runApp()
shiny::runApp()
runExample("02_text")
shiny::runApp()
runExample("02_text")
shiny::runApp()
shiny::runApp()
causes
causes[1]
class(causes[1])
causes <- as.character(causes)
causes[1]
shiny::runApp()
runExample("02_text")
shiny::runApp()
shiny::runApp()
head(mort2010)
subset(df,
ICD.Chapter=="Certain infectious and parasitic diseases",
select=c('State',
'Deaths',
'Crude.Rate')
)
subset(mort2010,
ICD.Chapter=="Certain infectious and parasitic diseases",
select=c('State',
'Deaths',
'Crude.Rate')
)
head(mortData)
colnames(mort2010)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
causes <- unique(mort2010$ICD.Chapter)
causes
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinyapps")
install.packages("shinyapps")
shiny::runApp()
require(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='davidstern', token='9DA1E04379B4A39CC402EF6E56C1A126', secret='1jhmM5UPjIIX2EkwA6Wpfn3F3wfaLbiQJgmsNAKN')
library(shinyapps)
shiny::runApp()
shiny::runApp()
shiny::runApp()
hed(mortData)
head(mortData)
head(mortData)
subset(Mortdata, State="Alabama", ICD.Chapter="Certain infectious and parasitic diseases")
subset(mortData, State="Alabama", ICD.Chapter="Certain infectious and parasitic diseases")
subset(mortData, State="Alabama" & ICD.Chapter="Certain infectious and parasitic diseases")
subset(mortData, State=="Alabama", ICD.Chapter=="Certain infectious and parasitic diseases")
subset(mortData, State=="Alabama" & ICD.Chapter=="Certain infectious and parasitic diseases")
a <- subset(mortData, State=="Alabama" & ICD.Chapter=="Certain infectious and parasitic diseases")
head(a)
head(mortData)
summary(mortdata$ICD.Chapter)
summary(mortSata$ICD.Chapter)
summary(mortData$ICD.Chapter)
a
1092/4430141
1092/4430141 * 10000
1092/4430141 * 100000
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
subset(mortData, State=="California" & ICD.Chapter=="Certain infectious and parasitic diseases")
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
shiny::runApp('~/GitHub/MSDA-Work/IS608Assignment3App2')
library(RCurl)
library(shiny)
setwd("/Users/davidstern/Github/MSDA-Work/IS608Assignment3App2")
url <- "https://raw.githubusercontent.com/jlaurito/CUNY_IS608/master/lecture3/data/cleaned-cdc-mortality-1999-2010.csv"
mortData <- getURL(url)
mortData <- read.csv(textConnection(mortData))
causes <- unique(mortData$ICD.Chapter)
causes <- as.character(causes)
states <- unique(mortData$State)
states <- as.character(states)
states
class(staetes)
class(states)
causes
class(causes)
states2 <- lapply(unique(mort_ui$State), as.character)
cause2  <- lapply(unique(mort_ui$ICD.Chapter), as.character)
states2 <- lapply(unique(mortData$State), as.character)
cause2  <- lapply(unique(mortData$ICD.Chapter), as.character)
states2
class(states2)
class(states2[51])
d <- states2[50]
class(d)
d
shiny::runApp()
shiny::runApp()
shiny::runApp()
?headerPanel
shiny::runApp()
a <- subset(mortData, State=="California" & ICD.Chapter=="Neoplasms")
a
a <- subset(mortData, ICD.Chapter=="Neoplasms")
head(a)
b <- aggregate(Deaths ~ State + ICD.Chapter, sum)
b <- aggregate(Deaths ~ State + ICD.Chapter, mortData, sum)
head(b)
b <- aggregate(Deaths ~ State ~ Year + ICD.Chapter, mortData, sum)
b <- aggregate(Deaths ~ State ~ Year + ICD.Chapter, mortData, sum)
b <- aggregate(Deaths ~ State + Year + ICD.Chapter, mortData, sum)
b <- aggregate(Deaths ~ Year + ICD.Chapter, mortData, sum)
head(b)
b <- aggregate(cbind(Deaths, Population) ~ Year + ICD.Chapter, mortData, sum)
head(b)
head(b, n=40)
head(b)
head(a)
a <- subset(mortData, ICD.Chapter=="Neoplasms", select=c(State,Year,ICD.Chapter,Crude.Rate))
head(a)
17*51
b["State"] = "National"
head(b)
b
head(a)
head(b)
a <- subset(mortData, ICD.Chapter=="Neoplasms", select=c(Year,ICD.Chapter,Crude.Rate,State))
head(a)
head(b)
summary(b)
aggregate(ICD.Chapter ~ Year,mortData,sum)
aggregate(ICD.Chapter ~ Year,mortData,table)
head(a)
head(b)
b <- aggregate(cbind(Deaths, Population) ~ Year + ICD.Chapter, mortData, sum)
b["State"] = "National"
head(b)
colnames(b)
colnames(mortData)
head(mortData)
1092*100000/4430141
transform(b, Crude.Rate = Deaths*100000/Population)
head(a)
head(b)
b <- b[,-3]
head(b)
b <- aggregate(cbind(Deaths, Population) ~ Year + ICD.Chapter, mortData, sum)
b["State"] = "National"
b <- transform(b, Crude.Rate = Deaths*100000/Population)
head(b)
head(a)
b <- aggregate(cbind(Deaths, Population) ~ Year + ICD.Chapter, mortData, sum)
b["State"] = "National"
b <- transform(b, Crude.Rate = Deaths*100000/Population)
b <- b[,c(1,2,6,4)]
head(a)
head(b)
b <- aggregate(cbind(Deaths, Population) ~ Year + ICD.Chapter, mortData, sum)
b["State"] = "National"
b <- transform(b, Crude.Rate = Deaths*100000/Population)
b <- b[,c(1,2,6,5)]
head(a)
head(b)
c <- rbind(a,b)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a <- subset(mortData, State=="California" & ICD.Chapter=="Neoplasms", select=c(Year,ICD.Chapter,Crude.Rate,State))
a
b <- aggregate(cbind(Deaths, Population) ~ Year + ICD.Chapter, mortData, sum)
head(b)
b <- aggregate(Death ~ Year + ICD.Chapter + State, mortData, sum)
b <- aggregate(Deaths ~ Year + ICD.Chapter + State, mortData, sum)
head(b)
b <- aggregate(Deaths ~ Year + ICD.Chapter, mortData, sum)
head(b)
head(a)
b <- aggregate(cbind(Deaths, Population) ~ Year + ICD.Chapter, mortData, sum)
b["State"] = "National"
b <- transform(b, Crude.Rate = Deaths*100000/Population)
b <- b[,c(1,2,6,5)]
head(b)
head(mortData)
shiny::runApp()
a <- subset(mortData, State=="California" & ICD.Chapter=="Neoplasms", select=c(Year,ICD.Chapter,Crude.Rate,State))
head(a)
d <- subset(c, State=="California" & ICD.Chapter=="Neoplasms", select=c(Year,ICD.Chapter,Crude.Rate,State))
head(d)
d <- subset(c, State=="National" & ICD.Chapter=="Neoplasms", select=c(Year,ICD.Chapter,Crude.Rate,State))
head(d)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
causes
class(causes)
causes[20] <- "National"
causes[-20]
class(states)
states[52] <- "National"
shiny::runApp()
shiny::runApp()
